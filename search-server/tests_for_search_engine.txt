// -------- Начало модульных тестов поисковой системы ----------
 
void TestExcludeStopWordsFromAddedDocumentContent() {
    const int doc_id = 42;
    const string content = "cat in the city"s;
    const vector<int> ratings = {1, 2, 3};
    // Сначала убеждаемся, что поиск слова, не входящего в список стоп-слов,
    // находит нужный документ
    {
        SearchServer server(""s);
        (void) server.AddDocument(doc_id, content, DocumentStatus::ACTUAL, ratings);
        auto res = server.FindTopDocuments("in"s);
        ASSERT_EQUAL(res.has_value(), true);
        ASSERT_EQUAL(res->size() , 1);
        const Document& doc0 = (*res)[0];
        ASSERT_EQUAL(doc0.id , doc_id);
    }
 
    // Затем убеждаемся, что поиск этого же слова, входящего в список стоп-слов,
    // возвращает пустой результат
    {
        SearchServer server("in the"s);
        (void) server.AddDocument(doc_id, content, DocumentStatus::ACTUAL, ratings);
        ASSERT_EQUAL(server.FindTopDocuments("in"s).has_value(), true);
    }
}
 
void TestAddDocument(){
 
    {
        SearchServer server(""s);
        (void) server.AddDocument(1, "пропала кошка"s, DocumentStatus::ACTUAL, {5,3,4,1});
        (void) server.AddDocument(2, "а"s, DocumentStatus::BANNED, {5,3,4,1});
        (void) server.AddDocument(3, "б"s, DocumentStatus::IRRELEVANT, {5,3,4,1});
        (void) server.AddDocument(4, "с"s, DocumentStatus::REMOVED, {5,3,4,1});
        auto result = server.FindTopDocuments("пропала кошка"s);
        ASSERT_EQUAL_HINT(result->size() , 1,
                          "Проверяет на добавление документов с разными статусами"s);
    }
 
    {
    SearchServer server(""s);
    (void) server.AddDocument(1, "пропала кошка"s, DocumentStatus::ACTUAL, {5,3,4,1});
    auto result = server.FindTopDocuments("пропала кошка"s);
    ASSERT_HINT(result.value()[0].relevance == 0 &&
           result.value()[0].id == 1 &&
           result.value()[0].rating == 13/4 ,
           "Проверяет на добавление одного документа и вычисление его рейтинга"s);
    }
 
    {
    SearchServer server(""s);
    bool check = server.AddDocument(0, "пропала кошка"s, DocumentStatus::ACTUAL, {5,3,4,1});
    ASSERT_EQUAL_HINT(check, true,
           "Проверяет на добавление id == 0"s);
    check = server.AddDocument(-1, "пропала кошка"s, DocumentStatus::ACTUAL, {5,3,4,1});
    ASSERT_EQUAL_HINT(check, false,
           "Проверяет на добавление отрицательного id"s);
    check = server.AddDocument(-2, "пропала кошка"s, DocumentStatus::ACTUAL, {5,3,4,1});
    ASSERT_EQUAL_HINT(check, false,
           "Проверяет на добавление отрицательного id"s);
    }
 
    {
    SearchServer server(""s);
    (void) server.AddDocument(0, "пропала кошка"s, DocumentStatus::ACTUAL, {5,3,4,1});
    (void) server.AddDocument(1, "пропала собака"s, DocumentStatus::ACTUAL, {5,3,4,1});
 
    (void) server.AddDocument(0, "пропала ящерица"s, DocumentStatus::ACTUAL, {5,3,4,1});
    (void) server.AddDocument(1, "пропал попугай"s, DocumentStatus::ACTUAL, {5,3,4,1});
 
    auto result = server.FindTopDocuments("пропала кошка"s);
    ASSERT_EQUAL_HINT(result->size(), 2,
           "Проверяет на добавление документа с существующим id"s);
    }
 
    {
        SearchServer server(""s);
        ASSERT_EQUAL_HINT(server.AddDocument(3, "большой пёс скво\x12рец"s, DocumentStatus::ACTUAL, {1, 3, 2}), false,
                          "Проверяем на добавление документа со спецсимволами"s);
    }
 
    {
    SearchServer server(""s);
    (void) server.AddDocument(1, "пропала кошка"s, DocumentStatus::ACTUAL, {5,3,4,1});
 
 
    auto result = server.FindTopDocuments("кошка пропала"s);
    ASSERT_HINT(result->size() == 1 &&
           result.value()[0].relevance == 0 &&
           result.value()[0].id == 1 &&
           result.value()[0].rating == 13/4 ,
            "Проверяет, что результат не зависит от перемены мест слов"s);
    }
 
    {
    SearchServer server(""s);
    (void) server.AddDocument(1, "пропала кошка"s, DocumentStatus::ACTUAL, {5,3,4,1});
    (void) server.AddDocument(2, "пропала собака"s, DocumentStatus::ACTUAL, {5,3,4,1});
    (void) server.AddDocument(3, "потерялась лисица"s, DocumentStatus::ACTUAL, {5,3,4,1});
 
    auto result = server.FindTopDocuments("лисица -пропала"s);
    ASSERT_EQUAL_HINT(result->size() , 1,
                      "Проверяет на исключение документа из списка выдачи"s);
    }
 
    {
    SearchServer server(""s);
    (void) server.AddDocument(1, "лисица пропала"s, DocumentStatus::ACTUAL, {5,3,4,1});
    (void) server.AddDocument(2, "собака пропала"s, DocumentStatus::ACTUAL, {5,3,4,1});
    (void) server.AddDocument(3, "потерялась лисица"s, DocumentStatus::ACTUAL, {5,3,4,1});
    auto check = server.FindTopDocuments("лисица --пропала"s);
    ASSERT_EQUAL_HINT(check.has_value(), false,
                      "Проверяет на обработку --"s);
    }
 
    {
    SearchServer server(""s);
    (void) server.AddDocument(3, "кошка игривая пропала"s, DocumentStatus::ACTUAL, {4,4,4,4});
    (void) server.AddDocument(2, "собака злая"s, DocumentStatus::BANNED, {4,4,4,4});
    (void) server.AddDocument(1, "попугай крикливый нашёлся"s, DocumentStatus::REMOVED, {5,3,4,1});
 
    auto result = server.FindTopDocuments("кошка злая потерялась"s);
    ASSERT_HINT(abs( result.value()[0].relevance - 0.3662040) < 1e-5, "Проверяет счёт релевантности");
    ASSERT_EQUAL_HINT(result.value()[0].rating, 4, "Проверяет счёт рейтинга");
    ASSERT_HINT(result->size() == 1 && result.value()[0].id == 3, "Проверяет на работу фильтра"s);
    }
 
    {
    SearchServer server(""s);
    (void) server.AddDocument(1, "кошка игривая пропала"s, DocumentStatus::BANNED, {1,2,3,4});
    (void) server.AddDocument(1, "кошка злая потерялась"s, DocumentStatus::BANNED, {4,4,4,4});
 
    auto result = server.FindTopDocuments("кошка злая потерялась"s, DocumentStatus::BANNED);
    ASSERT_HINT(result->size() == 1 &&
           result.value()[0].rating == 2,
           "Проверяет на изменение данных, при добавлении документов с одним и тем же индексом"s );
    }
 
    {
    SearchServer server(""s);
    (void) server.AddDocument(1, "пропала кошка"s, DocumentStatus::ACTUAL, {5,3,4,1});
    (void) server.AddDocument(2, "пропала кошка"s, DocumentStatus::ACTUAL, {5,3,4,1});
    (void) server.AddDocument(3, "пропала кошка"s, DocumentStatus::ACTUAL, {5,3,4,1});
    (void) server.AddDocument(4, "пропала кошка"s, DocumentStatus::ACTUAL, {5,3,4,1});
    (void) server.AddDocument(5, "пропала кошка"s, DocumentStatus::ACTUAL, {5,3,4,1});
    (void) server.AddDocument(6, "пропала кошка"s, DocumentStatus::ACTUAL, {5,3,4,1});
    (void) server.AddDocument(7, "пропала кошка"s, DocumentStatus::ACTUAL, {5,3,4,1});
 
    auto result = server.FindTopDocuments("пропала кошка"s);
    ASSERT_EQUAL_HINT(result->size() , 5,
                      "Проверяет на огранчение по количеству в топе"s);
    }
 
    {
    SearchServer server("на c"s);
    (void) server.AddDocument(1, "пропался кот"s, DocumentStatus::ACTUAL, {5,3,4,1});
    (void) server.AddDocument(2, "пропала собака"s, DocumentStatus::ACTUAL, {5,3,4,1});
    (void) server.AddDocument(3, "потерялась лиса"s, DocumentStatus::ACTUAL, {5,3,4,1});
 
    auto result = server.FindTopDocuments("кот - - - - "s);
    ASSERT(!result.has_value());
    ASSERT_HINT(!result.has_value() , "проверка на пустой -"s);
    }
 
    {
    SearchServer server("и на c"s);
    (void) server.AddDocument(1, "и кот попался "s, DocumentStatus::ACTUAL, {5,3,4,1});
    (void) server.AddDocument(2, "и собака пропала"s, DocumentStatus::ACTUAL, {5,3,4,1});
    (void) server.AddDocument(3, "лиса потерялась"s, DocumentStatus::ACTUAL, {5,3,4,1});
 
    auto result= server.FindTopDocuments("и лиса"s);
    ASSERT_EQUAL(result.has_value() , true);
    ASSERT_EQUAL_HINT(result->size() , 1,
                      "Поиск со стоп-словом должен"s);
    }
}
 
void TestSetStopWords(){
    {
    SearchServer server("по и или на с до за не"s);
 
    (void) server.AddDocument(1, "машина с беспилотным управлением и печкой"s, DocumentStatus::ACTUAL, {4, 4, 4, 4});
    (void) server.AddDocument(2, "автомобиль пропал"s, DocumentStatus::ACTUAL, {4, 4, 4, 4});
 
 
    auto result = server.FindTopDocuments("машина"s);
    ASSERT( abs(result.value()[0].relevance - 0.17328679) < 1e-6);
    }
}
 
void TestToMatchDocument(){
    {
    SearchServer server("и в на");
 
    (void) server.AddDocument(1, "машина беспилотная"s, DocumentStatus::ACTUAL, {4, 4, 4, 4});
    (void) server.AddDocument(2, "автомобиль пропал"s, DocumentStatus::ACTUAL, {4, 4, 4, 4});
    (void) server.AddDocument(3, "и машина пропала белая"s, DocumentStatus::ACTUAL, {4, 4, 4, 4});
 
    auto result1 = server.MatchDocument("машина -беспилотная"s, 1);
    ASSERT(!result1.has_value());
 
    auto result2 = server.MatchDocument("машина -беспилотная"s, 2);
    ASSERT(result2.has_value());
 
    auto result3 = server.MatchDocument("машина -беспилотная пропала"s, 3);
    ASSERT_EQUAL(get<0>(result3.value() ).size() , 2);
 
    auto result4 = server.MatchDocument("машина -беспилотная пропала"s, 4);
    ASSERT(!result4.has_value());
 
    auto result5 = server.MatchDocument("и машина -беспилотная пропала"s, 3);
    ASSERT_EQUAL(get<0>(result5.value()).size() , 2);
 
    auto result6 = server.MatchDocument("и"s, 3);
    ASSERT(result6.has_value());
    }
 
}
 
void TestSortRelevance(){
    {
        SearchServer server(""s);
        (void) server.AddDocument(1, "робот утилизатор"s, DocumentStatus::ACTUAL, {5,5,5,5,5});
        (void) server.AddDocument(2, "беспилотный самолёт"s, DocumentStatus::ACTUAL, {4,4,4,4});
        (void) server.AddDocument(3, "новая посудомойка"s, DocumentStatus::ACTUAL, {3,3,3});
        (void) server.AddDocument(4, "робот пылесос"s, DocumentStatus::ACTUAL, {2,2});
 
 
        auto result = server.FindTopDocuments("робот утилизатор беспилотный"s);
        ASSERT( result->size() == 3 &&
                result.value()[0].id == 1 &&
                result.value()[1].id == 2 &&
                result.value()[2].id == 4);
 
        (void) server.AddDocument(5, "робот робот"s, DocumentStatus::ACTUAL, {1});
 
        auto result1 = server.FindTopDocuments("робот утилизатор беспилотный"s);
        ASSERT( result1->size() == 4 &&
                result1.value()[0].id == 1 &&
                result1.value()[1].id == 2 &&
                result1.value()[2].id == 5 &&
                result1.value()[3].id == 4);
 
        auto result2 = server.FindTopDocuments("робот утилизатор беспилотный"s, [](int document_id, DocumentStatus status, int rating){
            return rating > 3;
        });
        ASSERT_EQUAL(result2->size() , 2);
    }
}
 
void TestSplitIntoWords(){
    auto vec1 = SplitIntoWords(""s);
    ASSERT_EQUAL(vec1.size() , 0);
    auto vec2 = SplitIntoWords("раз два три"s);
    ASSERT(vec2.size() == 3 &&
           vec2[0] == "раз"s);
    auto vec3 = SplitIntoWords("     раз      два      три     "s);
    ASSERT(vec3.size() == 3 &&
           vec3[0] == "раз"s);
}
 
void TestGetDocumentId(){
    SearchServer server(""s);
    (void) server.AddDocument(0, "пропала кошка"s, DocumentStatus::ACTUAL, {5,3,4,1});
    (void) server.AddDocument(1, "а"s, DocumentStatus::BANNED, {5,3,4,1});
    (void) server.AddDocument(2, "б"s, DocumentStatus::IRRELEVANT, {5,3,4,1});
    (void) server.AddDocument(3, "с"s, DocumentStatus::REMOVED, {5,3,4,1});
    ASSERT_EQUAL(server.GetDocumentId(-1), SearchServer::INVALID_DOCUMENT_ID);
    ASSERT_EQUAL(server.GetDocumentId(5), SearchServer::INVALID_DOCUMENT_ID);
    ASSERT_EQUAL(server.GetDocumentId(2), 2);
    ASSERT_EQUAL(server.GetDocumentId(3), 3);
}
 
// Функция TestSearchServer является точкой входа для запуска тестов
void TestSearchServer() {
    RUN_TEST(TestExcludeStopWordsFromAddedDocumentContent);
    RUN_TEST(TestAddDocument);
    RUN_TEST(TestSetStopWords);
    RUN_TEST(TestToMatchDocument);
    RUN_TEST(TestSortRelevance);
    RUN_TEST(TestSplitIntoWords);
    RUN_TEST(TestGetDocumentId);
}
 
// --------- Окончание модульных тестов поисковой системы -----------